- name: Install aptitude
  apt:
    name: aptitude
    state: latest
    update_cache: true

- name: install base apt packages
  ansible.builtin.apt:
    pkg:
      - git
      - build-essential
      - vim
      - strace
      - net-tools
      - iputils-ping 
      - iproute2 
      - python3 
      - python3-pip
      - nmon 
      - iotop 
      - ca-certificates 
      - curl 
      - gnupg-agent
      - apt-transport-https 
      - software-properties-common
      - openjdk-8-jre 
      - bridge-utils
    state: latest
    update_cache: true

- name: install pip dependencies
  ansible.builtin.pip:
    name:
      - ansible 
      - docker 
      - docker-compose

- name: update the version of requests
  command: pip install --upgrade requests

- name: Add Docker GPG apt Key
  apt_key:
    url: https://download.docker.com/linux/ubuntu/gpg
    state: present

- name: Add Docker Repository
  apt_repository:
    repo: deb https://download.docker.com/linux/ubuntu focal stable
    state: present

- name: Install docker-ce
  apt:
    pkg:
      - docker-ce 
      - docker-ce-cli 
      - containerd.io
    state: latest
    update_cache: true

- name: install headers matching kernel
  apt:
    pkg:
    - linux-headers-{{ansible_kernel}}

- name: create /opt/gtp5
  file:
    path: /opt/gtp5
    state: directory
    mode: '0777' 
  when: installGTP == true

- name: git checkout from gtp5
  ansible.builtin.git:
    repo: https://github.com/free5gc/gtp5g.git
    dest: /opt/gtp5
  when: installGTP == true

- name: Build and install gtp module
  ansible.builtin.shell: |
    make clean
    make
    make install
  args:
    chdir: /opt/gtp5
  when: installGTP == true

- name: Run portainer
  community.docker.docker_container:
    name: portainer
    image: portainer/portainer-ce:latest
    state: started
    recreate: true
    restart_policy: always
    ports:
      - 8000:8000
      - 9443:9443
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - portainer_data:/data
  when: deployPortainer == true

- name: create /opt/prometheus
  file:
    path: /opt/prometheus
    state: directory
    mode: '0777' 
  when: deployPrometheus == true

- name: git checkout prometheus
  ansible.builtin.git:
    repo: https://github.com/vegasbrianc/prometheus
    dest: /opt/prometheus
  when: deployPrometheus == yes

- name: run prometheus docker compose stack
  community.docker.docker_compose:
    project_src: /opt/prometheus  when: deployPrometheus == true
# 
  ansible.builtin.template:
    src: kafluentd.conf   dest: /opt
    mode: '0644'    
  when: deployKafka == true
  when: d
  eployFluentd == true
- name: deploy kafka
  community.docker.docker_compose:
    project_src: /opt
    files: kafka-compose.yaml
  when: deployKafka == true

- name: Validating if Kafka is up and listening
  wait_for:
    host: "{{ ansible_default_ipv4.address }}"
    port: {{kafkaPort}}
    delay: 10
    timeout: 30
    state: started
    msg: "kafka is not running"
  when: deployKafka == true

- name: deploy kafdrop
  community.docker.docker_container:
    name: kafdrop
    image: obsidiandynamics/kafdrop
    state: started
    recreate: true
    restart_policy: always
    ports:
      - 9000:9000
    env:
      KAFKA_BROKERCONNECT: "{{ ansible_default_ipv4.address }}:29092"
  when: deployKafka == true

# docker exec broker kafka-topics --bootstrap-server broker:9092 --create --topic quickstart
# - name: create topic for cadvisor
#   community.docker.docker_container_exec:
#     container: broker
#     command: /bin/bash -c "kafka-topics --bootstrap-server broker:9092 --create --topic quickstart"

- name: deploy cadvisor and connect to kafka
  community.docker.docker_container:
    name: cadvisor
    image: gcr.io/cadvisor/cadvisor
    entrypoint: ["/usr/bin/cadvisor", "-logtostderr","-storage_driver=kafka","-storage_driver_kafka_broker_list={{ (deployKafka) ansible_default_ipv4.address ansible_default_ipv4.address | externalKafkaAddress }}:{{ kafkaPort }}","-storage_driver_kafka_topic=cadvisor"]
    state: started
    recreate: true
    restart_policy: always
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:rw
      - /sys:/sys:ro
      - /var/lib/docker/:/var/lib/docker:ro
    ports:
      - 8080:8080
  when: deployPrometheus == false

- name: template fluentd config file
  ansible.builtin.template:
    src: fluentd.conf
    dest: /opt
    mode: '0644'    
  when: deployFluentd == true

- name: deploy fluentd
# docker run -d -p 24224:24224 -p 24224:24224/udp -v /data:/fluentd/log fluent/fluentd:v1.3-debian-1
  community.docker.docker_container:
    name: fluentd
    image: fluent/fluentd:v1.3-debian-1
    entrypoint: ["fluentd -c", "/fluentd.conf"]
    state: started
    recreate: true
    restart_policy: always
    volumes:
      - /data:/fluentd/log
      - /opt/fluentd.conf:/fluentd.conf
    ports:
      - 24224:24224
      - 5140:5140
  when: deployFluentd == true

- name: deploy nprobe
  community.docker.docker_container:
    name: nprobe
    image: ntop/nprobe:latest
    entrypoint: ["/usr/bin/nprobe", "-i", "eth0"]
    state: started
    recreate: true
    restart_policy: always
    capabilities:
      - NET_ADMIN
    network_mode: host
  when: deployNprobe == true